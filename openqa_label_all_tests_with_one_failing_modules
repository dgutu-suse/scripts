#!/usr/bin/env python
import argparse
import requests
import subprocess


class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
    """Preserve multi-line __doc__ and provide default arguments in help strings."""
    pass


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=CustomFormatter)
    parser.add_argument('--build',
                        help="The build for which to look for a failing module")
    parser.add_argument('--module',
                        help="The failing module to look for")
    parser.add_argument('--result',
                        help="The result of the jobs to look for",
                        default='failed')
    parser.add_argument('--label',
                        help="The label to write as comment for each found job")
    parser.add_argument('--dry-run', action='store_true',
                        help="Do not do any action on openQA")
    parser.add_argument('--no-restart', action='store_true',
                        help="Do not restart the jobs after labelling")
    args = parser.parse_args()
    return args


def call(cmds, dry_run=False):
    return subprocess.call((['echo', 'Simulating: '] if dry_run else []) + cmds)


def main():
    args = parse_args()
    r = requests.get('http://openqa.suse.de/api/v1/jobs?result=%s&latest=1&scope=relevant&build=%s' % (args.result, args.build))
    jobs = r.json()['jobs']
    jobs_with_failed_module = [j for j in jobs if [m for m in j['modules'] if m['name'] == args.module and m['result'] == args.result]]
    [call(['openqa_client_osd', 'jobs/%s/comments' % id, 'post', 'text=%s' % args.label], args.dry_run) for id in [j['id'] for j in jobs_with_failed_module]]
    if not args.no_restart:
        [call(['openqa_client_osd', 'jobs/%s/restart' % id, 'post'], args.dry_run) for id in [j['id'] for j in jobs_with_failed_module]]


if __name__ == "__main__":
    main()
